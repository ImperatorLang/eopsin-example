(program 1.0.0 [(lam p0 (lam p1 (lam p2 [(lam _ (con unit ())) [(lam s [(lam g [[[[g p0] (lam _ (con unit ()))] p2] s]) (force [[s (con bytestring #12)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: validator")] (con unit ())]])])]) [(lam s [(lam s [(lam a0 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #12)]] (delay (delay a0))] (delay [[s x] def])])))) (lam p0 (lam p1 (lam p2 (lam s [(lam s (con unit ())) [(lam s [(lam s (force [[[(force (builtin ifThenElse)) [(lam s (force [[s (con bytestring #11)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: check_minted_type_and_amount")] (con unit ())]])])) s]] (delay s)] (delay [(lam _ (error)) [[(force (builtin trace)) [(lam s (con string "Payment too low to mint requested number of tokens")) s]] (con unit ())]])])) [(lam s (force [[[(force (builtin ifThenElse)) [(lam s (force [[s (con bytestring #10)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: min_one_correct_token_minted")] (con unit ())]])])) s]] (delay s)] (delay [(lam _ (error)) [[(force (builtin trace)) [(lam s (con string "At leas one token with the correct name must be minted")) s]] (con unit ())]])])) [(lam s [(lam a0 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #11)]] (delay (delay a0))] (delay [[s x] def])])))) [(lam s [[(builtin lessThanEqualsInteger) [(lam s [[(builtin multiplyInteger) [(lam s [[[[(lam s [(lam self (lam key (lam default (lam _ [(builtin unIData) [(force (force (builtin sndPair))) [[(lam op [(lam g [g g]) (lam f (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [[(builtin mkPairData) [(builtin bData) key]] [(builtin iData) default]])] (delay (force [[[(force (builtin ifThenElse)) [op [(force (builtin headList)) xs]]] (delay [(force (builtin headList)) xs])] (delay [[f f] [(force (builtin tailList)) xs]])]))])))]) (lam x [[(builtin equalsData) [(builtin bData) key]] [(force (force (builtin fstPair))) x]])] self]]])))) [(lam s (force [[s (con bytestring #04)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: minted_token")] (con unit ())]])])) s]]) s] [(lam s [(lam self [(builtin unBData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 2)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]) [(lam s (force [[s (con bytestring #00)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: contract_param")] (con unit ())]])])) s]]) s]] [(lam s (con integer 0)) s]] s]) s]] [(lam s [(lam self [(builtin unIData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 1)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]) [(lam s (force [[s (con bytestring #00)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: contract_param")] (con unit ())]])])) s]]) s]]) s]] [(lam s (force [[s (con bytestring #0f)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: lovelace_paid")] (con unit ())]])])) s]]) s]]) [(lam s [(lam a0 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #10)]] (delay (delay a0))] (delay [[s x] def])])))) [(lam s [[(lam x (lam y [[(builtin lessThanEqualsInteger) y] x])) [(lam s [[[[(lam s [(lam self (lam key (lam default (lam _ [(builtin unIData) [(force (force (builtin sndPair))) [[(lam op [(lam g [g g]) (lam f (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [[(builtin mkPairData) [(builtin bData) key]] [(builtin iData) default]])] (delay (force [[[(force (builtin ifThenElse)) [op [(force (builtin headList)) xs]]] (delay [(force (builtin headList)) xs])] (delay [[f f] [(force (builtin tailList)) xs]])]))])))]) (lam x [[(builtin equalsData) [(builtin bData) key]] [(force (force (builtin fstPair))) x]])] self]]])))) [(lam s (force [[s (con bytestring #04)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: minted_token")] (con unit ())]])])) s]]) s] [(lam s [(lam self [(builtin unBData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 2)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]) [(lam s (force [[s (con bytestring #00)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: contract_param")] (con unit ())]])])) s]]) s]] [(lam s (con integer 0)) s]] s]) s]] [(lam s (con integer 1)) s]]) s]]) [(lam s [(lam a0 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #04)]] (delay (delay a0))] (delay [[s x] def])])))) [(lam s [(lam l [(lam raw_i [(lam i [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] i] l]) (force [[[(force (builtin ifThenElse)) [[(builtin lessThanInteger) raw_i] (con integer 0)]] (delay [[(builtin addInteger) raw_i] [[[(lam op [(lam g [g g]) (lam fold (lam xs (lam a (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay a)] (delay [[[fold fold] [(force (builtin tailList)) xs]] [[op a] [(force (builtin headList)) xs]]])]))))]) (lam a (lam _ [[(builtin addInteger) a] (con integer 1)]))] l] (con integer 0)]])] (delay raw_i)])]) [(lam s (con integer 0)) s]]) [(lam s [[(lam s [(lam self (lam _ [[(lam op [(lam g [g g]) (lam map (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay (con list<list<pair<data, data>>> []))] (delay [[(force (builtin mkCons)) [op [(force (builtin headList)) xs]]] [[map map] [(force (builtin tailList)) xs]]])])))]) (lam x [(builtin unMapData) [(force (force (builtin sndPair))) x]])] self])) [(lam s [(lam self [(builtin unMapData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 4)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]) [(lam s (force [[s (con bytestring #03)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: info")] (con unit ())]])])) s]]) s]]) s] s]) s]]) s]]) [(lam s [(lam a0 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #0f)]] (delay (delay a0))] (delay [[s x] def])])))) [(lam s [[[[[(lam s (force [[s (con bytestring #0a)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: all_tokens_locked_at_address")] (con unit ())]])])) s] [(lam s [(lam self [[(lam op [(lam g [g g]) (lam map (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(builtin mkNilData) (con unit ())])] (delay [[(force (builtin mkCons)) [op [(force (builtin headList)) xs]]] [[map map] [(force (builtin tailList)) xs]]])])))]) (lam x x)] [(builtin unListData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 2)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]]) [(lam s (force [[s (con bytestring #03)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: info")] (con unit ())]])])) s]]) s]] [(lam s [[[[(lam s (force [[s (con bytestring #08)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: Address")] (con unit ())]])])) s] [(lam s [[[(lam s (force [[s (con bytestring #06)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: PubKeyCredential")] (con unit ())]])])) s] [(lam s [(lam self [(builtin unBData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 0)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]) [(lam s (force [[s (con bytestring #00)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: contract_param")] (con unit ())]])])) s]]) s]] s]) s]] [(lam s [[(lam s (force [[s (con bytestring #07)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: NoStakingCredential")] (con unit ())]])])) s] s]) s]] s]) s]] [(lam s (force [[s (con bytestring #0d)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: LOVELACE")] (con unit ())]])])) s]] s]) s]]) [(lam s [(lam a0 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #03)]] (delay (delay a0))] (delay [[s x] def])])))) [(lam s [(lam self [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 0)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]) [(lam s (force [[s (con bytestring #0e)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: ctx")] (con unit ())]])])) s]]) s]]) s]]]]]]]) [[[(lam a0 (lam a1 (lam a2 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #0e)]] (delay (delay a2))] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #13)]] (delay (delay a1))] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #00)]] (delay (delay a0))] (delay [[s x] def])]))]))])))))) p0] p1] p2]]]))))]) [(lam s [(lam a0 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #0d)]] (delay (delay a0))] (delay [[s x] def])])))) [(lam s [[[[(lam s (force [[s (con bytestring #09)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: Token")] (con unit ())]])])) s] [(lam s (con bytestring #)) s]] [(lam s (con bytestring #)) s]] s]) s]]) [(lam s [(lam a0 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #0a)]] (delay (delay a0))] (delay [[s x] def])])))) (lam p0 (lam p1 (lam p2 (lam s [(lam s [[[(lam s (force [[s (con bytestring #05)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: sum")] (con unit ())]])])) s] [(lam s [[[(lam filter (lam map [(lam g [g g]) (lam filtermap (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay (con list<integer> []))] (delay [(lam head (force [[[(force (builtin ifThenElse)) [filter head]] (delay [[(force (builtin mkCons)) [map head]] [[filtermap filtermap] [(force (builtin tailList)) xs]]])] (delay [[filtermap filtermap] [(force (builtin tailList)) xs]])])) [(force (builtin headList)) xs]])])))])) (lam x [(lam s [[(builtin equalsData) [(lam s [(lam self [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 0)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]) [(lam s (force [[s (con bytestring #02)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: txo")] (con unit ())]])])) s]]) s]] [(lam s (force [[s (con bytestring #0c)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: address")] (con unit ())]])])) s]]) [(lam a0 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #02)]] (delay (delay a0))] (delay [[s x] def])])))) x]])] (lam x [(lam s [[[[(lam s [(lam self (lam key (lam default (lam _ [(builtin unIData) [(force (force (builtin sndPair))) [[(lam op [(lam g [g g]) (lam f (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [[(builtin mkPairData) [(builtin bData) key]] [(builtin iData) default]])] (delay (force [[[(force (builtin ifThenElse)) [op [(force (builtin headList)) xs]]] (delay [(force (builtin headList)) xs])] (delay [[f f] [(force (builtin tailList)) xs]])]))])))]) (lam x [[(builtin equalsData) [(builtin bData) key]] [(force (force (builtin fstPair))) x]])] self]]])))) [(lam s [[[[(lam s [(lam self (lam key (lam default (lam _ [(builtin unMapData) [(force (force (builtin sndPair))) [[(lam op [(lam g [g g]) (lam f (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [[(builtin mkPairData) [(builtin bData) key]] [(builtin mapData) default]])] (delay (force [[[(force (builtin ifThenElse)) [op [(force (builtin headList)) xs]]] (delay [(force (builtin headList)) xs])] (delay [[f f] [(force (builtin tailList)) xs]])]))])))]) (lam x [[(builtin equalsData) [(builtin bData) key]] [(force (force (builtin fstPair))) x]])] self]]])))) [(lam s [(lam self [(builtin unMapData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 1)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]) [(lam s (force [[s (con bytestring #02)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: txo")] (con unit ())]])])) s]]) s]]) s] [(lam s [(lam self [(builtin unBData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 0)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]) [(lam s (force [[s (con bytestring #01)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: token")] (con unit ())]])])) s]]) s]] [(lam s [[(force (builtin mkCons)) [[(builtin mkPairData) [(builtin bData) [(lam s (con bytestring #)) s]]] [(builtin iData) [(lam s (con integer 0)) s]]]] [(builtin mkNilPairData) (con unit ())]]) s]] s]) s]]) s] [(lam s [(lam self [(builtin unBData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 1)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]) [(lam s (force [[s (con bytestring #01)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: token")] (con unit ())]])])) s]]) s]] [(lam s (con integer 0)) s]] s]) [(lam a0 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #02)]] (delay (delay a0))] (delay [[s x] def])])))) x]])] [(lam s (force [[s (con bytestring #0b)] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "NameError: txouts")] (con unit ())]])])) s]]) s]] s]) [(lam s [(lam s [(lam _ s) [(lam s (con string "Returns how many tokens of specified type are locked at the given address")) s]]) s]) [[[(lam a0 (lam a1 (lam a2 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #01)]] (delay (delay a2))] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #0c)]] (delay (delay a1))] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #0b)]] (delay (delay a0))] (delay [[s x] def])]))]))])))))) p0] p1] p2]]]))))]) [(lam s [(lam a0 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #09)]] (delay (delay a0))] (delay [[s x] def])])))) (lam policy_id (lam token_name (lam _ [[(builtin constrData) (con integer 0)] [[(force (builtin mkCons)) [(builtin bData) policy_id]] [[(force (builtin mkCons)) [(builtin bData) token_name]] [(builtin mkNilData) (con unit ())]]]])))]) [(lam s [(lam a0 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #08)]] (delay (delay a0))] (delay [[s x] def])])))) (lam payment_credential (lam staking_credential (lam _ [[(builtin constrData) (con integer 0)] [[(force (builtin mkCons)) payment_credential] [[(force (builtin mkCons)) staking_credential] [(builtin mkNilData) (con unit ())]]]])))]) [(lam s [(lam a0 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #07)]] (delay (delay a0))] (delay [[s x] def])])))) (lam _ [[(builtin constrData) (con integer 1)] [(builtin mkNilData) (con unit ())]])]) [(lam s [(lam a0 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #06)]] (delay (delay a0))] (delay [[s x] def])])))) (lam credential_hash (lam _ [[(builtin constrData) (con integer 0)] [[(force (builtin mkCons)) [(builtin bData) credential_hash]] [(builtin mkNilData) (con unit ())]]]))]) [(lam s [(lam a0 (lam x (lam def (force [[[(force (builtin ifThenElse)) [[(builtin equalsByteString) x] (con bytestring #05)]] (delay (delay a0))] (delay [[s x] def])])))) [(lam _ (lam xs (lam _ [[[(lam op [(lam g [g g]) (lam fold (lam xs (lam a (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay a)] (delay [[[fold fold] [(force (builtin tailList)) xs]] [[op a] [(force (builtin headList)) xs]]])]))))]) (builtin addInteger)] xs] (con integer 0)]))) s]]) s]]]]]]]]) (lam x (lam def def))]]]))) (con data #d87983581cabf5de8ba711a8f9889a5b7865d8c1eefb72a06280c7a5a11bc4a5711a003d09004a4d656d62657273686970)])
