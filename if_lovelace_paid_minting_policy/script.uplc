(program 1.0.0 [(lam p0 (lam p1 (lam p2 [(lam _ (con unit ())) [(lam val [[[[val val] p0] (lam _ (con unit ()))] p2]) [(lam sum [(lam PubKeyCredential [(lam NoStakingCredential [(lam Address [(lam Token [(lam all_tokens_locked_at_address [(lam LOVELACE [(lam validator validator) (lam validator (lam contract_param (lam redeemer (lam ctx [(lam info [(lam lovelace_paid [(lam minted_token [(lam min_one_correct_token_minted [(lam check_minted_type_and_amount (force [[[(force (builtin ifThenElse)) min_one_correct_token_minted] (delay (force [[[(force (builtin ifThenElse)) check_minted_type_and_amount] (delay (con unit ()))] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "Payment too low to mint requested number of tokens")] (con unit ())]])]))] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "At least one token with the correct name must be minted")] (con unit ())]])])) [[(builtin lessThanEqualsInteger) [[(builtin multiplyInteger) [[[(lam g [g g]) [(lam self (lam _ (lam key (lam default [(builtin unIData) [(force (force (builtin sndPair))) [[(lam op [(lam g [g g]) (lam f (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [[(builtin mkPairData) [(builtin bData) key]] [(builtin iData) default]])] (delay (force [[[(force (builtin ifThenElse)) [op [(force (builtin headList)) xs]]] (delay [(force (builtin headList)) xs])] (delay [[f f] [(force (builtin tailList)) xs]])]))])))]) (lam x [[(builtin equalsData) [(builtin bData) key]] [(force (force (builtin fstPair))) x]])] self]]])))) minted_token]] [(lam self [(builtin unBData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 2)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]) contract_param]] (con integer 0)]] [(lam self [(builtin unIData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 1)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]) contract_param]]] lovelace_paid]]) [[(lam x (lam y [[(builtin lessThanEqualsInteger) y] x])) [[[(lam g [g g]) [(lam self (lam _ (lam key (lam default [(builtin unIData) [(force (force (builtin sndPair))) [[(lam op [(lam g [g g]) (lam f (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [[(builtin mkPairData) [(builtin bData) key]] [(builtin iData) default]])] (delay (force [[[(force (builtin ifThenElse)) [op [(force (builtin headList)) xs]]] (delay [(force (builtin headList)) xs])] (delay [[f f] [(force (builtin tailList)) xs]])]))])))]) (lam x [[(builtin equalsData) [(builtin bData) key]] [(force (force (builtin fstPair))) x]])] self]]])))) minted_token]] [(lam self [(builtin unBData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 2)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]) contract_param]] (con integer 0)]] (con integer 1)]]) [(lam l [(lam raw_i [(lam i [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] i] l]) (force [[[(force (builtin ifThenElse)) [[(builtin lessThanInteger) raw_i] (con integer 0)]] (delay [[(builtin addInteger) raw_i] [[[(lam op [(lam g [g g]) (lam fold (lam xs (lam a (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay a)] (delay [[[fold fold] [(force (builtin tailList)) xs]] [[op a] [(force (builtin headList)) xs]]])]))))]) (lam a (lam _ [[(builtin addInteger) a] (con integer 1)]))] l] (con integer 0)]])] (delay raw_i)])]) (con integer 1)]) [(lam g [g g]) [(lam self (lam _ [[(lam op [(lam g [g g]) (lam map (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay (con list<list<pair<data, data>>> []))] (delay [[(force (builtin mkCons)) [op [(force (builtin headList)) xs]]] [[map map] [(force (builtin tailList)) xs]]])])))]) (lam x [(builtin unMapData) [(force (force (builtin sndPair))) x]])] self])) [(lam self [(builtin unMapData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 4)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]) info]]]]]) [[[[(lam g [g g]) all_tokens_locked_at_address] [(lam self [[(lam op [(lam g [g g]) (lam map (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(builtin mkNilData) (con unit ())])] (delay [[(force (builtin mkCons)) [op [(force (builtin headList)) xs]]] [[map map] [(force (builtin tailList)) xs]]])])))]) (lam x x)] [(builtin unListData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 2)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]]) info]] [[[(lam g [g g]) Address] [[(lam g [g g]) PubKeyCredential] [(lam self [(builtin unBData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 0)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]) contract_param]]] [(lam g [g g]) NoStakingCredential]]] LOVELACE]]) [(lam self [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 0)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]) ctx]]))))]) [[[(lam g [g g]) Token] (con bytestring #)] (con bytestring #)]]) (lam all_tokens_locked_at_address (lam txouts (lam address (lam token [(lam 0 [[(lam g [g g]) sum] [[[(lam filter (lam map [(lam g [g g]) (lam filtermap (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay (con list<integer> []))] (delay [(lam head (force [[[(force (builtin ifThenElse)) [filter head]] (delay [[(force (builtin mkCons)) [map head]] [[filtermap filtermap] [(force (builtin tailList)) xs]]])] (delay [[filtermap filtermap] [(force (builtin tailList)) xs]])])) [(force (builtin headList)) xs]])])))])) (lam txo [[(builtin equalsData) [(lam self [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 0)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]) txo]] address])] (lam txo [[[(lam g [g g]) [(lam self (lam _ (lam key (lam default [(builtin unIData) [(force (force (builtin sndPair))) [[(lam op [(lam g [g g]) (lam f (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [[(builtin mkPairData) [(builtin bData) key]] [(builtin iData) default]])] (delay (force [[[(force (builtin ifThenElse)) [op [(force (builtin headList)) xs]]] (delay [(force (builtin headList)) xs])] (delay [[f f] [(force (builtin tailList)) xs]])]))])))]) (lam x [[(builtin equalsData) [(builtin bData) key]] [(force (force (builtin fstPair))) x]])] self]]])))) [[[(lam g [g g]) [(lam self (lam _ (lam key (lam default [(builtin unMapData) [(force (force (builtin sndPair))) [[(lam op [(lam g [g g]) (lam f (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [[(builtin mkPairData) [(builtin bData) key]] [(builtin mapData) default]])] (delay (force [[[(force (builtin ifThenElse)) [op [(force (builtin headList)) xs]]] (delay [(force (builtin headList)) xs])] (delay [[f f] [(force (builtin tailList)) xs]])]))])))]) (lam x [[(builtin equalsData) [(builtin bData) key]] [(force (force (builtin fstPair))) x]])] self]]])))) [(lam self [(builtin unMapData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 1)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]) txo]]] [(lam self [(builtin unBData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 0)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]) token]] [[(force (builtin mkCons)) [[(builtin mkPairData) [(builtin bData) (con bytestring #)]] [(builtin iData) (con integer 0)]]] [(builtin mkNilPairData) (con unit ())]]]]] [(lam self [(builtin unBData) [[[(lam g [g g]) (lam f (lam i (lam xs (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay [(lam _ (error)) [[(force (builtin trace)) (con string "IndexError")] (con unit ())]])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) i] (con integer 0)]] (delay [(force (builtin headList)) xs])] (delay [[[f f] [[(builtin subtractInteger) i] (con integer 1)]] [(force (builtin tailList)) xs]])]))]))))] (con integer 1)] [(force (force (builtin sndPair))) [(builtin unConstrData) self]]]]) token]] (con integer 0)])] txouts]]) (con string "Returns how many tokens of specified type are locked at the given address")]))))]) (lam _ (lam policy_id (lam token_name [[(builtin constrData) (con integer 0)] [[(force (builtin mkCons)) [(builtin bData) policy_id]] [[(force (builtin mkCons)) [(builtin bData) token_name]] [(builtin mkNilData) (con unit ())]]]])))]) (lam _ (lam payment_credential (lam staking_credential [[(builtin constrData) (con integer 0)] [[(force (builtin mkCons)) payment_credential] [[(force (builtin mkCons)) staking_credential] [(builtin mkNilData) (con unit ())]]]])))]) (lam _ [[(builtin constrData) (con integer 1)] [(builtin mkNilData) (con unit ())]])]) (lam _ (lam credential_hash [[(builtin constrData) (con integer 0)] [[(force (builtin mkCons)) [(builtin bData) credential_hash]] [(builtin mkNilData) (con unit ())]]]))]) (lam _ (lam xs [[[(lam op [(lam g [g g]) (lam fold (lam xs (lam a (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) xs]] (delay a)] (delay [[[fold fold] [(force (builtin tailList)) xs]] [[op a] [(force (builtin headList)) xs]]])]))))]) (builtin addInteger)] xs] (con integer 0)]))]]]))) (con data #d87983581cabf5de8ba711a8f9889a5b7865d8c1eefb72a06280c7a5a11bc4a5711a003d09004a4d656d62657273686970)])
